Evennia in Docker
=================

This repo has everything needed to get Evennia_ running quickly
under Docker_ with docker-compose_.

.. _Docker: https://www.docker.com/
.. _docker-compose: https://docs.docker.com/compose/
.. _Evennia: http://www.evennia.com/

Quickstart
----------

.. code:: bash

    # From within evennia-docker...
    # Slap your choice of evennia source in. We'll default to canonical.
    git clone https://github.com/evennia/evennia.git
    # Install the reqs for evennia-docker.
    pip install -r requirements.txt
    # This will build the Docker image.
    docker-compose build
    # Creates your game directory, runs migrations, and sets a superuser
    # up for yourself.
    docker-compose run server bash -c "cd .. && ./setup_game.sh"
    # TODO: chmod the game dir
    # This will bring up the server and the portal.
    docker-compose up
    # Double CTRL+C when you want to stop it.

After walking through this, you'll be able to reach your game at port 4000.
If you are running on Linux, this will end up being localhost port 4000. If
you are running Mac or Windows, you'll need to find the IP of your
container VM (192.168.99.100 by default) and hit port 4000 on it.

Similarly, the web interface is available on port 8000 by default.

You'll also notice that you now have a ``game`` directory. Feel free to
go nuts on anything in there as you would a normal install.

How and When to re-build your Evennia Docker image
--------------------------------------------------

In our quickstart, we end up building a local Evennia image. You'll notice
that changing things in the ``evennia`` doesn't lead to your changes being
automatically applied to the game in your container.

If you make any modifications to the ``evennia`` directory, be sure to
rebuild your image like this::

    docker-compose build

After that, you can restart (or run) your container as usual and get the
updates::

    docker-compose up

**NOTE: It is NOT necessary to rebuild your image if you change anything
under ``game``. This directory is mounted as a volume. You only need
restart the container to see your changes.**

Additional notes
----------------

Running in production
^^^^^^^^^^^^^^^^^^^^^

If you are going to use the Docker images generated by compose in a production
setting, I'd suggest running separate containers for the server and portal
with linking between the two. You'd need to update your settings ``AMP_HOST``
to point to the link name.

Volumes and root ownership
^^^^^^^^^^^^^^^^^^^^^^^^^^

Depending on who you are running docker as, you may find that your ``game``
directory ends up being owned by root. You can safely ``chmod`` the files, if
so. I'm all ears if anyone has ideas on how to address this for the majority
of our users.

Legal
-----

The contents of this repository are licensed under the MIT License. See
``LICENSE`` for a copy.
